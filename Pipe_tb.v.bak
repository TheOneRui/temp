`timescale 1ns / 1ps

module Pipe_tb;

    parameter BIT_WIDTH = 32;
    parameter TEST_DURATION = 1000; // Duration of the test in clock cycles

    // Inputs
    reg clk;
    reg rst;
    reg w_cntrl_real;
    reg w_cntrl_imag;
    reg r_cntrl;
    reg [BIT_WIDTH-1:0] data_in_real;
    reg [BIT_WIDTH-1:0] data_in_imag;

    // Outputs
    wire [BIT_WIDTH-1:0] data_out;
    wire full_real;
    wire full_imag;
    wire empty;

    // Instantiate the Unit Under Test (UUT)
    Pipe #(
        .N(16),
        .BIT_WIDTH(BIT_WIDTH),
        .MAX_ITERATIONS(512),
        .FLOAT_PRECISION(26)
    ) uut (
        .clk(clk),
        .rst(rst),
        .w_cntrl_real(w_cntrl_real),
        .w_cntrl_imag(w_cntrl_imag),
        .r_cntrl(r_cntrl),
        .data_in_real(data_in_real),
        .data_in_imag(data_in_imag),
        .data_out(data_out),
        .full_real(full_real),
        .full_imag(full_imag),
        .empty(empty)
    );

    // Clock generation
    always #5 clk = ~clk;

    // Random number generator for test inputs
    function [BIT_WIDTH-1:0] random;
        input [31:0] seed;
        reg [31:0] next;
        begin
            next = seed * 1103515245 + 12345;
            random = next[BIT_WIDTH-1:0];
        end
    endfunction

    // Test stimuli
    integer i;
    reg [BIT_WIDTH-1:0] expected_data_out;
    initial begin
        // Initialize Inputs
        clk = 0;
        rst = 1;
        w_cntrl_real = 0;
        w_cntrl_imag = 0;
        r_cntrl = 0;
        data_in_real = 0;
        data_in_imag = 0;

        // Reset condition
        #100;
        rst = 0;

        // Randomized input and read/write control
        for (i = 0; i < TEST_DURATION; i = i + 1) begin
            w_cntrl_real = $random % 2;
            w_cntrl_imag = $random % 2;
            r_cntrl = $random % 2;

            if (w_cntrl_real && !full_real) data_in_real = random(i);
            if (w_cntrl_imag && !full_imag) data_in_imag = random(i + 1);

            #10;

            // Verify the outputs based on some expected conditions
            if (r_cntrl && !empty) begin
                expected_data_out = /* calculation based on input conditions */;
                // Check against expected output
                if (data_out != expected_data_out)
                    $display("Test failed at time %d: Expected %d, got %d", $time, expected_data_out, data_out);
            end
        end

        // Complete simulation
        $display("Test completed successfully.");
        $finish;
    end

endmodule
