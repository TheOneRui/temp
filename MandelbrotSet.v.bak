module ClockDivider(
    input clk_in,  // Input clock at 50 MHz
    output reg clk_out  // Output clock at 25 MHz
);

    // Initialize the output clock to low
    initial clk_out = 0;

    always @(posedge clk_in) begin
        clk_out <= ~clk_out;  // Toggle the output clock on each rising edge of the input clock
    end

endmodule

module MandelbrotSet(
    input wire clk,     // 25 MHz
    input wire reset,	// Active high

    output wire VGA_HS,	// HSYNC (to VGA connector)
    output wire VGA_VS,	// VSYNC (to VGA connctor)
    output [7:0] VGA_R,	// RED (to resistor DAC VGA connector)
    output [7:0] VGA_G,	// GREEN (to resistor DAC to VGA connector)
    output [7:0] VGA_B,	// BLUE (to resistor DAC to VGA connector)
    output VGA_SYNC,		// SYNC to VGA connector
    output VGA_CLK,		// CLK to VGA connector
    output VGA_BLANK		// BLANK to VGA connector
);

	parameter H_ACTIVE	= 640;// Active video horizontal length
	parameter V_ACTIVE	= 480;// Active video vertical height

	wire	clk_25Mhz;
	ClockDivider	div(
		.clk_in(clk),
		.clk_out(clk_25Mhz)
	);
		
	
//	//	AddressMapper
//	AddressMapper addmap(
//		.clk(clk_25Mhz),
//		.rst(reset),
//		.mapped_x(?),
//		.mapped_y(?)
//	);
//	
//	//	PIPE
//	Pipe	pipe(
//		.clk(clk_25Mhz),
//		.rst(reset),
//		.w_cntrl_real,
//		.w_cntrl_imag,
//		.r_cntrl,
//		.data_in_real,
//		.data_in_imag,
//		
//		.data_out,
//		.full_real, 
//		.full_imag, 
//		.empty 
//	);
	
	
	// Declaration of the 2D register array
	reg	[8:0] display_buffer[H_ACTIVE-1:0][V_ACTIVE-1:0];
	reg	[8:0]	display_pointer;
	
	// Instantiate VGADriver                   
	VGADriver	driver( 
		.clk(clk_25Mhz),	// 25 MHz PLL
		.reset(reset),
		
		.red_in(display_pointer[8:6]),
		.green_in(display_pointer[5:3]),
		.blue_in(display_pointer[2:0]),
		
		.vga_sync(VGA_SYNC),
		.vga_clk(VGA_CLK),
		.vga_blank(VGA_BLANK),
		.hsync(VGA_HS),
		.vsync(VGA_VS),
		
		.vga_red(VGA_R),
		.vga_green(VGA_G),
		.vga_blue(VGA_B)
	);

	integer i, j;
	always @(posedge clk) begin
		if (reset) begin
			for (i = 0; i < H_ACTIVE; i = i + 1) begin
				for (j = 0; j < V_ACTIVE; j = j + 1) begin
					display_buffer[i][j]	<= 9'd0;
				end
			end
		end
		
		else	begin
			for (i = 0; i < H_ACTIVE; i = i + 1) begin
				for (j = 0; j < V_ACTIVE; j = j + 1) begin
					display_pointer	<=	display_buffer[i][j];
				end
			end
		end
		
	end

endmodule
